package org.simpleEventManager.manager;

import org.bukkit.Bukkit;
import org.bukkit.GameMode;
import org.bukkit.entity.Player;
import org.simpleEventManager.SimpleEventManager;
import org.simpleEventManager.api.EventGame;

import java.util.ArrayList;
import java.util.List;

public class EventController {

    private final SimpleEventManager plugin;

    public EventController(SimpleEventManager plugin) {
        this.plugin = plugin;
    }

    public void endEvent(EventGame game) {
        List<Player> winners = new ArrayList<>(game.getWinners());

        // G√©rer les r√©compenses et statistiques selon la configuration
        boolean rewardsEnabled = game.isRewardsEnabled();

        if (rewardsEnabled && !winners.isEmpty()) {
            // Ajouter la victoire aux statistiques seulement si les r√©compenses sont activ√©es
            plugin.getWinManager().addWin(winners.get(0).getUniqueId(), game.getEventName());
        }

        game.stop();

        // Message de fin diff√©rent selon la configuration
        String eventDescription = game.getEventName();
        if (rewardsEnabled) {
            Bukkit.broadcastMessage("¬ßcL'√©v√©nement ¬ße" + eventDescription + " ¬ßcvient de se terminer !");
        } else {
            Bukkit.broadcastMessage("¬ßcL'√©v√©nement fun ¬ße" + eventDescription + " ¬ßcvient de se terminer !");
        }

        if (!winners.isEmpty()) {
            Bukkit.broadcastMessage("¬ß6¬ßlüèÜ Classement des gagnants :");
            for (int i = 0; i < winners.size(); i++) {
                Player w = winners.get(i);
                if (w != null && w.isOnline()) {
                    String trophy = getTrophyIcon(i);
                    String statusIndicator = plugin.getParticipantManager().hasManuallyLeft(w) ? " ¬ß7(parti t√¥t)" : "";
                    Bukkit.broadcastMessage("¬ße" + trophy + " #" + (i + 1) + " ¬ßf" + w.getName() + statusIndicator);
                }
            }

            // Message diff√©rent selon le type d'√©v√©nement
            if (rewardsEnabled) {
                Bukkit.broadcastMessage("¬ßaüí∞ Distribution des r√©compenses en cours...");
            } else {
                Bukkit.broadcastMessage("¬ß7‚ú® Bravo √† tous ! (√âv√©nement fun - pas de r√©compenses)");
            }
        } else {
            if (rewardsEnabled) {
                Bukkit.broadcastMessage("¬ßcAucun gagnant pour cet √©v√©nement.");
            } else {
                Bukkit.broadcastMessage("¬ß7Merci √† tous pour votre participation !");
            }
        }

        // S√©parer les participants actifs de ceux partis manuellement
        List<Player> activeParticipants = new ArrayList<>(plugin.getParticipantManager().getOnlineParticipants());
        List<Player> manuallyLeftParticipants = new ArrayList<>();

        // Identifier les participants qui ont quitt√© manuellement
        for (Player participant : plugin.getParticipantManager().getAllParticipantsForRewards()) {
            if (plugin.getParticipantManager().hasManuallyLeft(participant)) {
                manuallyLeftParticipants.add(participant);
            }
        }

        // G√©rer les participants actifs (reset + t√©l√©portation)
        for (Player player : activeParticipants) {
            resetPlayer(player);
            sendEndMessages(player, winners, rewardsEnabled);
            // T√©l√©portation au spawn
            Bukkit.dispatchCommand(Bukkit.getConsoleSender(), "spawn " + player.getName());
        }

        // G√©rer les participants partis manuellement (messages seulement, pas de t√©l√©portation)
        for (Player player : manuallyLeftParticipants) {
            sendEndMessages(player, winners, rewardsEnabled);
            // PAS de t√©l√©portation - ils sont d√©j√† au spawn
            plugin.getLogger().info("Participant " + player.getName() + " d√©j√† au spawn (parti manuellement)");
        }

        // Distribuer les r√©compenses seulement si activ√©es (pour TOUS les participants)
        if (rewardsEnabled && !winners.isEmpty()) {
            try {
                RewardManager rewardManager = new RewardManager(plugin);
                rewardManager.distribute(winners);

                int totalParticipants = activeParticipants.size() + manuallyLeftParticipants.size();
                int manuallyLeftCount = manuallyLeftParticipants.size();

                plugin.getLogger().info("R√©compenses distribu√©es pour l'√©v√©nement " + game.getEventName() +
                        " √† " + winners.size() + " gagnant(s) sur " + totalParticipants + " participants" +
                        (manuallyLeftCount > 0 ? " (dont " + manuallyLeftCount + " partis manuellement)" : ""));
            } catch (Exception e) {
                plugin.getLogger().warning("Erreur lors de la distribution des r√©compenses: " + e.getMessage());
                Bukkit.broadcastMessage("¬ßcErreur lors de la distribution des r√©compenses. Contactez un administrateur.");
            }
        } else if (!rewardsEnabled) {
            plugin.getLogger().info("√âv√©nement fun termin√© " + game.getEventName() +
                    " - pas de r√©compenses distribu√©es (normal)");
        }

        plugin.getParticipantManager().clear();
        plugin.setCurrentGame(null);
        plugin.getLobbyState().closeLobby();
    }

    /**
     * Envoie les messages de fin personnalis√©s √† un joueur
     */
    private void sendEndMessages(Player player, List<Player> winners, boolean rewardsEnabled) {
        if (winners.contains(player)) {
            if (rewardsEnabled) {
                player.sendMessage("¬ßaüéâ F√©licitations ! Vous avez gagn√© et recevrez des r√©compenses !");
                if (plugin.getParticipantManager().hasManuallyLeft(player)) {
                    player.sendMessage("¬ßeüí° Vos r√©compenses vous sont livr√©es m√™me si vous √™tes parti t√¥t !");
                }
            } else {
                player.sendMessage("¬ßaüéâ Bien jou√© ! Merci d'avoir particip√© √† cet √©v√©nement fun !");
            }
        } else {
            if (rewardsEnabled) {
                player.sendMessage("¬ß7Merci pour votre participation ! Tentez votre chance au prochain √©v√©nement.");
            } else {
                player.sendMessage("¬ß7Merci d'avoir particip√© √† cet √©v√©nement fun !");
            }
        }
    }

    /**
     * Obtient l'ic√¥ne de troph√©e selon le rang
     */
    private String getTrophyIcon(int position) {
        return switch (position) {
            case 0 -> "ü•á"; // 1er
            case 1 -> "ü•à"; // 2e
            case 2 -> "ü•â"; // 3e
            default -> "üèÖ"; // Autres
        };
    }

    /**
     * Remet le joueur dans un √©tat normal
     */
    private void resetPlayer(Player player) {
        try {
            player.setGameMode(GameMode.SURVIVAL);
            player.setHealth(player.getMaxHealth());
            player.setFoodLevel(20);
            player.setFireTicks(0);
            player.setFallDistance(0);
            player.setVelocity(new org.bukkit.util.Vector(0, 0, 0));
            player.clearActivePotionEffects();
            player.setInvulnerable(false);
        } catch (Exception e) {
            plugin.getLogger().warning("Erreur lors de la r√©initialisation du joueur " + player.getName() + ": " + e.getMessage());
        }
    }

    /**
     * Force la fin d'un √©v√©nement avec gestion des r√©compenses
     */
    public void forceEndEvent(String reason) {
        EventGame currentGame = plugin.getCurrentGame();
        if (currentGame == null) {
            return;
        }

        plugin.getLogger().info("Fin forc√©e de l'√©v√©nement " + currentGame.getEventName() + ": " + reason);

        // Pas de gagnants en cas de fin forc√©e, donc pas de r√©compenses
        currentGame.stop();

        Bukkit.broadcastMessage("¬ßc‚ö† " + reason);

        // G√©rer tous les participants (actifs et partis manuellement)
        List<Player> allParticipants = new ArrayList<>(plugin.getParticipantManager().getAllParticipantsForRewards());

        for (Player player : allParticipants) {
            player.sendMessage("¬ßc√âv√©nement interrompu. Aucune r√©compense ne sera distribu√©e.");

            // Reset et t√©l√©portation seulement pour les participants actifs
            if (!plugin.getParticipantManager().hasManuallyLeft(player)) {
                resetPlayer(player);
                Bukkit.dispatchCommand(Bukkit.getConsoleSender(), "spawn " + player.getName());
            }
        }

        plugin.getParticipantManager().clear();
        plugin.setCurrentGame(null);
        plugin.getLobbyState().closeLobby();
    }

    /**
     * Obtient des informations sur l'√©v√©nement en cours
     */
    public String getCurrentEventInfo() {
        EventGame currentGame = plugin.getCurrentGame();
        if (currentGame == null) {
            return "Aucun √©v√©nement en cours";
        }

        StringBuilder info = new StringBuilder();
        info.append("√âv√©nement: ").append(currentGame.getEventName());
        info.append("\nParticipants actifs: ").append(plugin.getParticipantManager().getOnlineCount());
        info.append("\nParticipants totaux: ").append(plugin.getParticipantManager().getTotalCount());
        info.append("\nPartis manuellement: ").append(plugin.getParticipantManager().getManuallyLeftParticipants().size());
        info.append("\nR√©compenses: ").append(currentGame.isRewardsEnabled() ? "Activ√©es" : "D√©sactiv√©es");
        info.append("\nNotifications: ").append(currentGame.isNotificationsEnabled() ? "Activ√©es" : "D√©sactiv√©es");

        return info.toString();
    }
}